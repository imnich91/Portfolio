var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import React from 'react';
import Text from './Text';
import ValidationError from '../ValidationError';

class Number extends React.Component {

  getValue() {
    return this.refs.inp.getValue();
  }

  validate(value) {
    const { name, minValue, minValueMsg, maxValue, maxValueMsg } = this.props;
    return this.refs.inp.validate(value).then(v => {
      const num = parseFloat(v);
      if (isNaN(num)) {
        return Promise.reject(new ValidationError(this, name, "Value is not a number"));
      }

      if (minValue !== undefined && num < minValue) {
        return Promise.reject(new ValidationError(this, name, minValueMsg || "Value must be greater than or equals to " + minValue));
      }
      if (maxValue !== undefined && num > maxValue) {
        return Promise.reject(new ValidationError(this, name, maxValueMsg || "Value must be less than or equals to " + maxValue));
      }

      return num;
    });
  }

  render() {
    return React.createElement(Text, _extends({ ref: 'inp' }, this.props));
  }
}

export default Number;