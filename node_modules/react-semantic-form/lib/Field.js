'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Fieldset = require('./Fieldset');

var _Fieldset2 = _interopRequireDefault(_Fieldset);

var _inputs = require('./inputs');

var inputs = _interopRequireWildcard(_inputs);

var _reactDom = require('react-dom');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Field = function (_React$Component) {
  _inherits(Field, _React$Component);

  function Field(props, context) {
    _classCallCheck(this, Field);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Field).call(this, props, context));

    _this.state = {
      error: false
    };
    return _this;
  }

  _createClass(Field, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var name = this.props.name;
      this.context.fieldset.registerInput(name, this);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var name = this.props.name;
      this.context.fieldset.unregisterInput(name, this);
    }
  }, {
    key: 'getValue',
    value: function getValue() {
      return this.refs.inp.getValue();
    }
  }, {
    key: 'validate',
    value: function validate(value) {
      var _this2 = this;

      return this.refs.inp.validate(value).then(function (value) {
        _this2.setState({
          error: false
        });
        return value;
      }).catch(function (err) {
        console.log("Error ", err);
        _this2.setState({
          error: err.toString()
        });
      });
    }
  }, {
    key: 'setFocus',
    value: function setFocus() {
      var inp = this.refs.inp;
      if (inp.setFocus) {
        inp.setFocus();
      } else {
        var node = (0, _reactDom.findDOMNode)(inp);
        if (node && node.focus) {
          node.focus();
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var label = _props.label;
      var className = _props.className;
      var type = _props.type;
      var name = _props.name;

      var other = _objectWithoutProperties(_props, ['label', 'className', 'type', 'name']);

      var error = this.state.error;
      var Input = typeof type === "string" ? inputs.hasOwnProperty(type) ? inputs[type] : inputs.Text : type;
      var defaultValue = this.context.fieldset.getDefaultValue(name);
      return _react2.default.createElement(
        'div',
        { className: "inline fields ui grid" },
        _react2.default.createElement(
          'div',
          { className: "four wide column field" + (error ? " error" : "") },
          label && _react2.default.createElement(
            'label',
            null,
            label
          )
        ),
        _react2.default.createElement(
          'div',
          { className: "twelve wide column field" + (error ? " error" : "") },
          _react2.default.createElement(Input, _extends({ ref: 'inp', name: name }, other, { value: defaultValue })),
          typeof error === "string" && _react2.default.createElement(
            'p',
            null,
            error
          )
        )
      );
    }
  }]);

  return Field;
}(_react2.default.Component);

Field.contextTypes = {
  fieldset: _react2.default.PropTypes.object
};

//
// Field.connect = function(component) {
//   return React.createClass({
//     contextTypes: {
//       fieldset: React.PropTypes.instanceOf(Fieldset)
//     },
//
//     componentDidMount() {
//       const name = this.props.name;
//       this.context.fieldset.registerInput(name, this.refs.inp);
//     },
//
//     componentWillUnmount() {
//       const name = this.props.name;
//       this.context.fieldset.unregisterInput(name, this.refs.inp);
//     },
//
//     render() {
//       return <component ref="inp" {...this.props} />
//     }
//
//   });
// }

exports.default = Field;