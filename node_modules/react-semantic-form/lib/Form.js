'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Fieldset = require('./Fieldset');

var _Fieldset2 = _interopRequireDefault(_Fieldset);

var _reactDom = require('react-dom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Form = function (_React$Component) {
  _inherits(Form, _React$Component);

  function Form(props, context) {
    _classCallCheck(this, Form);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Form).call(this, props, context));
  }

  _createClass(Form, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        fieldset: this
      };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      // Find out the first input component and set focus on that
      var inp = this.refs.set.getFirstInput();
      if (inp) {
        if (inp.setFocus) {
          inp.setFocus();
        } else {
          var node = (0, _reactDom.findDOMNode)(inp);
          if (node && node.focus) {
            node.focus();
          }
        }
      }
    }
  }, {
    key: 'registerInput',
    value: function registerInput(name, component) {
      //return this.refs.set.registerInput(name, component);
    }
  }, {
    key: 'unregisterInput',
    value: function unregisterInput(name, component) {
      //return this.refs.set.unregisterInput(name, component);
    }
  }, {
    key: 'getDefaultValue',
    value: function getDefaultValue(name) {
      //return this.refs.set.getDefaultValue(name);
    }
  }, {
    key: 'getValue',
    value: function getValue() {
      return this.refs.set.getValue();
    }
  }, {
    key: 'validate',
    value: function validate(value) {
      return this.refs.set.validate(value);
    }
  }, {
    key: '_onKeyDown',
    value: function _onKeyDown(e) {
      var _this2 = this;

      if (e.keyCode == 13) {
        // Try to submit this form
        this.getValue().then(function (v) {
          return _this2.validate(v);
        }).then(function (v) {
          console.log("Submit::", JSON.stringify(v));
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var children = _props.children;

      var other = _objectWithoutProperties(_props, ['children']);

      return _react2.default.createElement(
        _Fieldset2.default,
        _extends({ ref: 'set', className: 'ui form' }, other, {
          onKeyDown: this._onKeyDown.bind(this) }),
        children
      );
    }
  }]);

  return Form;
}(_react2.default.Component);

Form.childContextTypes = {
  fieldset: _react2.default.PropTypes.object
};

Form.propTypes = {
  name: _react2.default.PropTypes.string.isRequired,
  value: _react2.default.PropTypes.object,
  attributes: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.object),
  suppress: _react2.default.PropTypes.object
};

exports.default = Form;